Nessa aula vamos fazer um desafio, seguindo o mesmo raciocínio vamos fazer um desafio que a pessoa
coloca no input um número e em cima mostra se o número é par ou é impar.


O código inteiro do useEffect.jsx ficou dessa forma:

import React, { useEffect, useState } from 'react'
import PageTitle from '../../components/layout/PageTitle'
import SectionTitle from '../../components/layout/SectionTitle'


function calcFatorial(num){
    const n = parseInt(num)
    if(n < 0) return -1
    if(n ===0) return 1
    return calcFatorial(n-1) * n
}

function calcParImpar(num){
    const i = parseInt(num)
    const result = i % 2
    return result
}

const UseEffect = (props) => {

    const [number, setNumber] = useState(1)
    const [fatorial,setFatorial] = useState(1)

    const [number2,setNumber2] = useState(0)
    const [resultado,setResutado] = useState(0)

    {/* useEffect exercício 02*/}

    useEffect(function(){
        setResutado(calcParImpar(number2))
    },[number2])


    {/* useEffect exercício 01*/}
    useEffect(function (){
        setFatorial(calcFatorial(number))
    },[number])

    return (
        <div className="UseEffect">
            <PageTitle
                title="Hook UseEffect"
                subtitle="Permite executar efeitos colaterais em componentes funcionais!"
            />

            <SectionTitle title="Exercício #01"/>

            <div className="center">
                <div>
                <span className="text">Fatorial:</span>
                <span className="text red"> {fatorial === -1 ? 'Não existe' : fatorial }</span>
                </div>
            <input type="number" className="input" value={number} onChange={e => setNumber(e.target.value)} />
            </div>

            <SectionTitle title="Exercício #02"/>
            <div className="center">
                <div>
                    <span className="text">Par ou Impar:</span>
                    <span className="text red"> {resultado === 0 ? 'Par' : 'Impar'} </span>
                </div>
                <input type="number" className="input" value={number2} onChange={e => setNumber2(e.target.value)} />
            </div>
        </div>
    )
}

export default UseEffect


------------------------------------------------------------------------------->

Agora vamos as explicações sobre as questões:

Primeiro criamos a função para fazer a verificação se é par ou é impar:

function calcParImpar(num){
    const i = parseInt(num)
    const result = i % 2
    return result
}

essa função vai usar o módulo para verificar se a divisão tem resto 0 ou Não
caso for resto 0 é par, caso for resto 1 é impar.

vamos criar os nossos arrays para usar o useEffect, o primeiro para conseguir digitar no input porquê 
por padrão o nosso componente é um componente controlado e para isso vamos transformar
ele em um componente não controlado

const [number2,setNumber2] = useState(0)
esse array estamos usando para criar o nosso input não controlado:

<input type="number" className="input" value={number2} onChange={e => setNumber2(e.target.value)} />


Nesse outro trecho criamos nosso outro array para ser utilizado com o useEffect, seguindo o padrão:

1º -> o primeiro item do array é uma função
2º -> o campo que quando for alterado vai executar a função do nº 1

const [resultado,setResutado] = useState(0)

    
    
    {/* useEffect exercício 02*/}

    useEffect(function(){
        setResutado(calcParImpar(number2))
    },[number2])

E no final vamos fazer a comparação e mostrar na tela:

<div>
        <span className="text">Par ou Impar:</span>
        <span className="text red"> {resultado === 0 ? 'Par' : 'Impar'} </span>
</div>

-------------------------------------------------------------------------------->