Nessa aula vamos quebrar nosso código em partes para separar mais e organizar nosso código

Vamos criar uma pasta chamada store, dentro dela vamos ter 2 pastas

-> na raiz dessa pasta vamos ter nosso config.js
-> action (onde vai ficar nossas actions em separado), isso facilita a questão de fazer funções mais complexas
-> reducers -> onde vai ficar nossos reducers

no config.js vai ficar dessa forma:

import { reducer } from './reducers/index'
import { numberAdd2 } from './actions/number'

const initialState = {
    cart: [],
    products: [],
    user: null,
    number: 0
}

export {
    reducer,
    initialState
}


no actions vamos ter 3 arquivos

index.js:

import { numberAdd2 } from "./number";
import { login } from "./user";


export {
    numberAdd2,
    login
}

que apenas chama nossas actions

numbers.js:

export function numberAdd2(dispatch){
    dispatch({type: 'numberAdd2'})
}

user.js:


export function login(dispatch,name){
    dispatch({type: 'login' , payload: name})
}

dentro de reducers, vamos ter apenas uma index.js puxando nossos reducers:

export function reducer(state,action){
    switch(action.type){
        case 'numberAdd2':
            return {...state,number:state.number + 2}
        case 'numberMulti7':
            return {...state,number:state.number * 7}
        case 'numberDiv25':
            return {...state,number:state.number / 25}
        case 'inteiro':
            return {...state,number:parseInt(state.number)}
        case 'numberAddN':
            return {...state,number:state.number + action.payload}        
        case 'login':
            return {...state, user: {name: action.payload}}    
        default:
            return state    
    }
}

e o código agora do nosso useReducers.js:

import React, { useReducer } from 'react'
import PageTitle from '../../components/layout/PageTitle'

import {initialState, reducer} from '../../store/config'
import { numberAdd2, login  } from '../../store/actions'

const UseReducer = (props) => {

    const[state,dispatch] = useReducer(reducer, initialState)


    return (
        <div className="UseReducer">
            <PageTitle
                title="Hook UseReducer"
                subtitle="Uma outra forma de ter estado em componentes funcionais!"
            />
            <div className="center">
                {state.user ?
                <span className="text">{state.user.name}</span>
                : <span className="text">Sem usuário</span>    
            }

                <span className="text">{state.number}</span>
                <div>
                    <button className="btn" onClick={()=>  login(dispatch, 'Danilo')}>Login</button>
                    <button className="btn" onClick={() => numberAdd2(dispatch)}>+2</button>
                    <button className="btn" onClick={() => dispatch({type: 'numberMulti7'})}>*7</button>
                    <button className="btn" onClick={() => dispatch({type: 'numberDiv25'})}>/25</button>
                    <button className="btn" onClick={() => dispatch({type: 'inteiro'})}>Inteiro</button>
                    <button className="btn" onClick={() => dispatch({type: 'numberAddN' , payload: -9})}>-9</button>
                </div>
            </div>
        </div>
    )
}

export default UseReducer
